distro: bionic
# branches:
#   only:
#   - master
sudo: required
language:
- bash
services:
- docker
env:
- OKD_VERSION="3.11.0" GO_VERSION="1.13.7" # OpenShift Origin (OKD)
before_install:
  - wget https://github.com/openshift/origin/releases/download/v$OKD_VERSION/openshift-origin-client-tools-v$OKD_VERSION-0cbc58b-linux-64bit.tar.gz -O /tmp/oc.tar.gz
  - mkdir /tmp/ocdir && cd /tmp/ocdir && tar -xvf /tmp/oc.tar.gz
  - sudo mv  /tmp/ocdir/*/oc /tmp/ocdir/*/kubectl  /usr/local/bin/
script:
  - docker version
  - oc version
  - |
   cat << EOF | sudo tee /etc/docker/daemon.json
   {
       "insecure-registries" : [ "172.30.0.0/16" ]
   }
   EOF
  - sudo systemctl restart docker
  - oc cluster up
  - ls
  # - curl http://127.0.0.1:8443 #OKD Cluster listening on local interface
  # - curl https://127.0.0.1:8443/console #Access Admin Console in a browser
  # Install jenkinsci
  - oc new-app jenkins-ephemeral #If you want to use persistent storage, use jenkins-persistent instead.
  # - oc create -f nodejs-sample-pipeline.yaml # create the BuildConfig in your OpenShift cluster
  - oc create -f https://raw.githubusercontent.com/openshift/origin/master/examples/jenkins/pipeline/nodejs-sample-pipeline.yaml
  - oc start-build nodejs-sample-pipeline
  - oc get pods
  # pipeline project
  - oc create -f https://raw.githubusercontent.com/openshift/origin/master/examples/image-streams/image-streams-centos7.json -n openshift # create the example imagestreams and templates in the openshift namespace
  - oc create -f https://raw.githubusercontent.com/openshift/origin/master/examples/jenkins/jenkins-ephemeral-template.json -n openshif
  - oc get is -n openshift #Confirm that the example imagestreams and templates are present in the openshift namespace
  - oc get templates -n openshift
  # Basic Pipeline
  - oc new-project pipelineproject
  - oc new-app -f https://raw.githubusercontent.com/openshift/origin/master/examples/jenkins/pipeline/samplepipeline.yaml # Instantiate the template which will create a pipeline buildconfig and some other resources
  - oc start-build sample-pipeline #Launch a new build
  - oc status
  # Maven Slave Example
  - oc new-project maven-pipeline-project
  - oc new-app -f https://raw.githubusercontent.com/openshift/origin/master/examples/jenkins/pipeline/maven-pipeline.yaml # Instantiate the template which will create a pipeline buildconfig and some other resources
  - oc start-build maven-pipeline #Launch a new build
  - oc status
  # Install go
  - go version
  - go env
  - curl -O https://storage.googleapis.com/golang/go$GO_VERSION.linux-amd64.tar.gz
  - sha256sum go$GO_VERSION.linux-amd64.tar.gz #Verify the .tar file
  - tar -xvf go$GO_VERSION.linux-amd64.tar.gz
  - sudo chown -R root:root ./go
  - sudo mv go /usr/local
  - export GOPATH=$HOME/go
  - export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin
  # Test go Installation
  - mkdir -p go/src/hello && cd go/src/hello
  - |
   cat << EOF | sudo tee hello.go
    package main

    import "fmt"

    func main() {
        fmt.Printf("hola mundo, world\n")
    }
   EOF
  - go build
  - "./hello"
  - go version
  - go env
  # Install kube-bench from sources
  - go get github.com/aquasecurity/kube-bench
  - go get github.com/golang/dep/cmd/dep
  - cd $GOPATH/src/github.com/aquasecurity/kube-bench
  # - $GOPATH/bin/dep ensure -vendor-only
  - "go build -o kube-bench ."
  - "./kube-bench --help" # See all supported options
  - ./kube-bench --version ocp-3.11 # Benchmark OKD
after_install:
  - oc status
